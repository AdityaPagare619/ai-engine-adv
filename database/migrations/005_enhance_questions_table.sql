-- =============================================================================\n-- 005_enhance_questions_table.sql\n-- JEE Smart AI Platform - Enhance Questions Table with Industry-Grade Columns\n-- ALTER MIGRATION: Adds new columns to existing questions table for Phase 4A\n-- =============================================================================\n\nBEGIN;\n\n-- Add new columns for industry-grade question management\n-- These columns will be added with proper defaults to existing data\n\nRaISE NOTICE 'Starting questions table enhancement with industry-grade columns...';\n\n-- Subject & Content Hierarchy Enhancement\nALTER TABLE questions ADD COLUMN IF NOT EXISTS subject VARCHAR(20);\nALTER TABLE questions ADD COLUMN IF NOT EXISTS unit TEXT;\nALTER TABLE questions ADD COLUMN IF NOT EXISTS chapter TEXT;\nALTER TABLE questions ADD COLUMN IF NOT EXISTS topic TEXT;\nALTER TABLE questions ADD COLUMN IF NOT EXISTS subtopic TEXT;\n\n-- Question Structure & Format\nALTER TABLE questions ADD COLUMN IF NOT EXISTS section VARCHAR(2);\nALTER TABLE questions ADD COLUMN IF NOT EXISTS marks NUMERIC(4,2) DEFAULT 4.00;\nALTER TABLE questions ADD COLUMN IF NOT EXISTS negative_marks NUMERIC(4,2) DEFAULT 1.00;\n\n-- Question Content & Rendering (stem_text will replace question_text)\nALTER TABLE questions ADD COLUMN IF NOT EXISTS stem_text TEXT;\nALTER TABLE questions ADD COLUMN IF NOT EXISTS stem_latex TEXT;\nALTER TABLE questions ADD COLUMN IF NOT EXISTS answer_format JSONB;\n\n-- Answer Information (enhanced from existing)\nALTER TABLE questions ADD COLUMN IF NOT EXISTS correct_option_indices SMALLINT[];\nALTER TABLE questions ADD COLUMN IF NOT EXISTS correct_numeric_value NUMERIC;\n\n-- Psychometrics & Item Response Theory (IRT)\nALTER TABLE questions ADD COLUMN IF NOT EXISTS difficulty_admin VARCHAR(20);\nALTER TABLE questions ADD COLUMN IF NOT EXISTS difficulty_calibrated NUMERIC(5,3);\nALTER TABLE questions ADD COLUMN IF NOT EXISTS discrimination NUMERIC(5,3);\n\n-- Learning Taxonomy & Cognitive Requirements\nALTER TABLE questions ADD COLUMN IF NOT EXISTS bloom_level VARCHAR(20);\nALTER TABLE questions ADD COLUMN IF NOT EXISTS required_process_skills TEXT[];\nALTER TABLE questions ADD COLUMN IF NOT EXISTS required_formulas TEXT[];\n\n-- Visual & Cognitive Load Analysis\nALTER TABLE questions ADD COLUMN IF NOT EXISTS diagram_cognitive_load SMALLINT;\n\n-- Time Analytics & Performance Prediction\nALTER TABLE questions ADD COLUMN IF NOT EXISTS estimated_time_seconds INT;\nALTER TABLE questions ADD COLUMN IF NOT EXISTS calibrated_time_median_seconds INT;\nALTER TABLE questions ADD COLUMN IF NOT EXISTS time_std_seconds INT;\n\n-- NTA Historical Exam Data\nALTER TABLE questions ADD COLUMN IF NOT EXISTS nta_year SMALLINT;\nALTER TABLE questions ADD COLUMN IF NOT EXISTS nta_shift SMALLINT;\nALTER TABLE questions ADD COLUMN IF NOT EXISTS nta_session_code TEXT;\n\n-- Usage & Exposure Analytics\nALTER TABLE questions ADD COLUMN IF NOT EXISTS occurrence_count INT DEFAULT 0;\nALTER TABLE questions ADD COLUMN IF NOT EXISTS exposure_count INT DEFAULT 0;\nALTER TABLE questions ADD COLUMN IF NOT EXISTS last_used_at TIMESTAMPTZ;\n\n-- Cohort Performance & Error Analytics\nALTER TABLE questions ADD COLUMN IF NOT EXISTS cohort_failure_rate NUMERIC(5,3);\nALTER TABLE questions ADD COLUMN IF NOT EXISTS cohort_topper_failure_rate NUMERIC(5,3);\n\n-- Error Pattern Analysis & Misconceptions\nALTER TABLE questions ADD COLUMN IF NOT EXISTS common_traps JSONB;\nALTER TABLE questions ADD COLUMN IF NOT EXISTS misconception_codes TEXT[];\n\n-- Educational Support & Solution Content\nALTER TABLE questions ADD COLUMN IF NOT EXISTS editorial_solution_text TEXT;\nALTER TABLE questions ADD COLUMN IF NOT EXISTS solution_steps JSONB;\nALTER TABLE questions ADD COLUMN IF NOT EXISTS solution_video_url TEXT;\nALTER TABLE questions ADD COLUMN IF NOT EXISTS hint_count SMALLINT DEFAULT 0;\nALTER TABLE questions ADD COLUMN IF NOT EXISTS hints JSONB;\n\n-- Localization & Accessibility\nALTER TABLE questions ADD COLUMN IF NOT EXISTS language VARCHAR(10) DEFAULT 'en';\nALTER TABLE questions ADD COLUMN IF NOT EXISTS translation_group_id TEXT;\nALTER TABLE questions ADD COLUMN IF NOT EXISTS accessibility JSONB;\n\n-- Selection Constraints & Adaptive Rules\nALTER TABLE questions ADD COLUMN IF NOT EXISTS selection_constraints JSONB;\n\n-- System Status & Lifecycle (enhance existing validation_status)\nALTER TABLE questions ADD COLUMN IF NOT EXISTS status VARCHAR(20) DEFAULT 'draft';\n\n-- Authoring & Quality Control\nALTER TABLE questions ADD COLUMN IF NOT EXISTS author_id UUID;\nALTER TABLE questions ADD COLUMN IF NOT EXISTS reviewer_id UUID;\nALTER TABLE questions ADD COLUMN IF NOT EXISTS qc_score NUMERIC(4,2);\nALTER TABLE questions ADD COLUMN IF NOT EXISTS flags JSONB;\n\n-- Version Control & Integrity\nALTER TABLE questions ADD COLUMN IF NOT EXISTS content_hash TEXT;\nALTER TABLE questions ADD COLUMN IF NOT EXISTS version INT DEFAULT 1;\n\n-- =============================================================================\n-- DATA MIGRATION AND CLEANUP\n-- =============================================================================\n\n-- Migrate existing data to new columns where applicable\nUPDATE questions SET \n    stem_text = question_text,\n    stem_latex = question_latex,\n    bloom_level = bloom_taxonomy,\n    status = CASE \n        WHEN validation_status = 'VALIDATED' THEN 'released'\n        WHEN validation_status = 'PENDING' THEN 'draft'\n        WHEN validation_status = 'NEEDS_REVIEW' THEN 'review'\n        ELSE 'draft'\n    END,\n    answer_format = CASE \n        WHEN question_type = 'MCQ' THEN '{\"type\":\"mcq\",\"num_options\":4}'\n        WHEN question_type = 'NUMERICAL' THEN '{\"type\":\"numeric\",\"tolerance\":\"absolute\",\"tolerance_value\":0.01}'\n        ELSE '{\"type\":\"mcq\",\"num_options\":4}'\n    END::JSONB,\n    correct_numeric_value = numerical_answer,\n    difficulty_admin = CASE \n        WHEN difficulty_level < 0.3 THEN 'Foundation'\n        WHEN difficulty_level < 0.7 THEN 'Regular'\n        WHEN difficulty_level < 0.9 THEN 'Advanced'\n        ELSE 'Extreme'\n    END,\n    difficulty_calibrated = (difficulty_level - 0.5) * 4, -- Convert 0-1 scale to -2 to +2 IRT scale\n    discrimination = 0.6, -- Default discrimination\n    estimated_time_seconds = CASE\n        WHEN question_type = 'MCQ' THEN 90\n        WHEN question_type = 'NUMERICAL' THEN 180\n        ELSE 120\n    END,\n    has_diagram = has_images,\n    diagram_cognitive_load = CASE WHEN has_images THEN 2 ELSE NULL END\nWHERE stem_text IS NULL; -- Only update rows that haven't been updated yet\n\n-- Parse correct_option into correct_option_indices array\nUPDATE questions SET \n    correct_option_indices = CASE \n        WHEN correct_option = 'A' THEN ARRAY[1]\n        WHEN correct_option = 'B' THEN ARRAY[2]\n        WHEN correct_option = 'C' THEN ARRAY[3]\n        WHEN correct_option = 'D' THEN ARRAY[4]\n        WHEN correct_option ~ '^[1-4]$' THEN ARRAY[correct_option::SMALLINT]\n        ELSE NULL\n    END\nWHERE correct_option_indices IS NULL AND correct_option IS NOT NULL;\n\n-- Extract subject from subject_id for better normalization\nUPDATE questions SET \n    subject = CASE \n        WHEN subject_id LIKE '%PHY%' THEN 'Physics'\n        WHEN subject_id LIKE '%CHE%' OR subject_id LIKE '%CHEM%' THEN 'Chemistry'\n        WHEN subject_id LIKE '%MAT%' OR subject_id LIKE '%MATH%' THEN 'Maths'\n        ELSE 'Physics' -- Default\n    END\nWHERE subject IS NULL;\n\n-- Set default content hash for existing questions\nUPDATE questions SET \n    content_hash = encode(digest(\n        COALESCE(stem_text, '') || \n        COALESCE(stem_latex, '') || \n        COALESCE(answer_format::text, '') ||\n        COALESCE(array_to_string(correct_option_indices, ','), '') ||\n        COALESCE(correct_numeric_value::text, ''),\n        'sha256'\n    ), 'hex')\nWHERE content_hash IS NULL;\n\n-- =============================================================================\n-- ADD CONSTRAINTS AND INDEXES\n-- =============================================================================\n\n-- Add constraints for data quality\nALTER TABLE questions ADD CONSTRAINT IF NOT EXISTS chk_marks_positive CHECK (marks > 0);\nALTER TABLE questions ADD CONSTRAINT IF NOT EXISTS chk_negative_marks_valid CHECK (negative_marks >= 0 AND negative_marks <= marks);\nALTER TABLE questions ADD CONSTRAINT IF NOT EXISTS chk_difficulty_calibrated_range CHECK (difficulty_calibrated BETWEEN -4.0 AND 4.0);\nALTER TABLE questions ADD CONSTRAINT IF NOT EXISTS chk_discrimination_positive CHECK (discrimination >= 0 AND discrimination <= 3.0);\nALTER TABLE questions ADD CONSTRAINT IF NOT EXISTS chk_exposure_non_negative CHECK (exposure_count >= 0);\nALTER TABLE questions ADD CONSTRAINT IF NOT EXISTS chk_qc_score_range CHECK (qc_score BETWEEN 0.0 AND 5.0);\nALTER TABLE questions ADD CONSTRAINT IF NOT EXISTS chk_hint_count_non_negative CHECK (hint_count >= 0);\nALTER TABLE questions ADD CONSTRAINT IF NOT EXISTS chk_section_valid CHECK (section IN ('A', 'B', 'C'));\nALTER TABLE questions ADD CONSTRAINT IF NOT EXISTS chk_nta_shift_valid CHECK (nta_shift IN (1, 2));\nALTER TABLE questions ADD CONSTRAINT IF NOT EXISTS chk_difficulty_admin_valid CHECK (difficulty_admin IN ('Foundation', 'Regular', 'Advanced', 'Extreme'));\nALTER TABLE questions ADD CONSTRAINT IF NOT EXISTS chk_bloom_level_valid CHECK (bloom_level IN ('Remember', 'Understand', 'Apply', 'Analyze', 'Evaluate', 'Create'));\nALTER TABLE questions ADD CONSTRAINT IF NOT EXISTS chk_status_valid CHECK (status IN ('draft', 'review', 'approved', 'released', 'retired', 'beta'));\n\n-- Add performance indexes for new columns\nCREATE INDEX IF NOT EXISTS idx_q_subject_topic_diff ON questions(subject, topic, difficulty_calibrated);\nCREATE INDEX IF NOT EXISTS idx_q_status_exposure ON questions(status, exposure_count DESC);\nCREATE INDEX IF NOT EXISTS idx_q_selection_gin ON questions USING GIN (selection_constraints) WHERE selection_constraints IS NOT NULL;\nCREATE INDEX IF NOT EXISTS idx_q_difficulty_bloom ON questions(difficulty_admin, bloom_level);\nCREATE INDEX IF NOT EXISTS idx_q_nta_data ON questions(nta_year, nta_shift, nta_session_code);\nCREATE INDEX IF NOT EXISTS idx_q_last_used ON questions(last_used_at DESC) WHERE last_used_at IS NOT NULL;\nCREATE INDEX IF NOT EXISTS idx_q_hash_version ON questions(content_hash, version);\nCREATE INDEX IF NOT EXISTS idx_q_stem_text_gin ON questions USING GIN (to_tsvector('english', stem_text)) WHERE stem_text IS NOT NULL;\nCREATE INDEX IF NOT EXISTS idx_q_misconceptions_gin ON questions USING GIN (misconception_codes) WHERE misconception_codes IS NOT NULL;\nCREATE INDEX IF NOT EXISTS idx_q_skills_gin ON questions USING GIN (required_process_skills) WHERE required_process_skills IS NOT NULL;\nCREATE INDEX IF NOT EXISTS idx_q_formulas_gin ON questions USING GIN (required_formulas) WHERE required_formulas IS NOT NULL;\nCREATE INDEX IF NOT EXISTS idx_q_flags_gin ON questions USING GIN (flags) WHERE flags IS NOT NULL;\n\n-- =============================================================================\n-- CREATE SUPPORTING TABLES FOR INDUSTRY-GRADE FEATURES\n-- =============================================================================\n\n-- Question-Concepts Bridge Table (for BKT/DKT integration)\nCREATE TABLE IF NOT EXISTS question_concepts (\n    question_id  VARCHAR(250) REFERENCES questions(question_id) ON DELETE CASCADE,\n    concept_id   UUID NOT NULL, -- Bridge to knowledge_concepts in Supabase\n    role         VARCHAR(20) NOT NULL DEFAULT 'primary' CHECK (role IN ('primary', 'secondary', 'prerequisite', 'related')),\n    weight       NUMERIC(4,3) DEFAULT 1.0 CHECK (weight BETWEEN 0.0 AND 1.0),\n    difficulty_within_concept SMALLINT CHECK (difficulty_within_concept BETWEEN 1 AND 10),\n    created_at   TIMESTAMPTZ DEFAULT NOW(),\n    PRIMARY KEY (question_id, concept_id)\n);\n\n-- Question Performance Statistics (Historical Analytics)\nCREATE TABLE IF NOT EXISTS question_stats (\n    question_id   VARCHAR(250) REFERENCES questions(question_id) ON DELETE CASCADE,\n    year          SMALLINT NOT NULL,\n    shift         SMALLINT CHECK (shift IN (1, 2)),\n    session_code  TEXT,\n    attempts      INT DEFAULT 0,\n    correct       INT DEFAULT 0,\n    p_value       NUMERIC(5,3),  -- Proportion correct (0-1)\n    discrimination NUMERIC(5,3), -- Point-biserial correlation\n    median_time   INT,           -- Median response time in seconds\n    time_p90      INT,           -- 90th percentile time\n    cohort_breakdown JSONB,      -- Performance by student segments\n    topper_error_rate NUMERIC(5,3),\n    weak_learner_error_rate NUMERIC(5,3),\n    drift_flags   JSONB,         -- Flags for performance drift detection\n    created_at    TIMESTAMPTZ DEFAULT NOW(),\n    updated_at    TIMESTAMPTZ DEFAULT NOW(),\n    PRIMARY KEY (question_id, year, shift, session_code)\n);\n\n-- Question Variants (for A/B testing and translations)\nCREATE TABLE IF NOT EXISTS question_variants (\n    variant_id    UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    base_question_id VARCHAR(250) REFERENCES questions(question_id) ON DELETE CASCADE,\n    variant_type  VARCHAR(20) NOT NULL CHECK (variant_type IN ('translation', 'difficulty_adjust', 'format_change', 'a_b_test')),\n    variant_data  JSONB NOT NULL,\n    is_active     BOOLEAN DEFAULT TRUE,\n    created_at    TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Add indexes for new tables\nCREATE INDEX IF NOT EXISTS idx_qc_concept_role ON question_concepts(concept_id, role, weight DESC);\nCREATE INDEX IF NOT EXISTS idx_qc_question_weight ON question_concepts(question_id, weight DESC);\nCREATE INDEX IF NOT EXISTS idx_qs_performance ON question_stats(p_value, discrimination);\nCREATE INDEX IF NOT EXISTS idx_qs_time_analysis ON question_stats(median_time, time_p90);\nCREATE INDEX IF NOT EXISTS idx_qs_year_session ON question_stats(year, session_code);\nCREATE INDEX IF NOT EXISTS idx_qv_base_type ON question_variants(base_question_id, variant_type);\n\n-- =============================================================================\n-- UPDATE TRIGGERS FOR NEW COLUMNS\n-- =============================================================================\n\n-- Content hash generation trigger\nCREATE OR REPLACE FUNCTION generate_question_content_hash()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.content_hash = encode(digest(\n        COALESCE(NEW.stem_text, '') || \n        COALESCE(NEW.stem_latex, '') || \n        COALESCE(NEW.answer_format::text, '') ||\n        COALESCE(array_to_string(NEW.correct_option_indices, ','), '') ||\n        COALESCE(NEW.correct_numeric_value::text, ''),\n        'sha256'\n    ), 'hex');\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nDROP TRIGGER IF EXISTS generate_question_hash ON questions;\nCREATE TRIGGER generate_question_hash BEFORE INSERT OR UPDATE ON questions\n    FOR EACH ROW EXECUTE FUNCTION generate_question_content_hash();\n\n-- Auto-update exposure tracking function\nCREATE OR REPLACE FUNCTION update_question_exposure()\nRETURNS TRIGGER AS $$\nBEGIN\n    UPDATE questions \n    SET exposure_count = exposure_count + 1,\n        last_used_at = NOW()\n    WHERE question_id = NEW.question_id;\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- =============================================================================\n-- COMPLETION AND VALIDATION\n-- =============================================================================\n\n-- Validate the migration\nDO $$\nDECLARE\n    column_count INTEGER;\nBEGIN\n    -- Count new columns to ensure migration worked\n    SELECT COUNT(*) INTO column_count \n    FROM information_schema.columns \n    WHERE table_name = 'questions' \n    AND table_schema = 'public'\n    AND column_name IN ('stem_text', 'difficulty_calibrated', 'discrimination', 'misconception_codes', 'selection_constraints');\n    \n    IF column_count >= 5 THEN\n        RAISE NOTICE '✅ Questions table enhancement completed successfully!';\n        RAISE NOTICE '✅ Added % industry-grade columns', column_count;\n        RAISE NOTICE '✅ Data migration completed for existing questions';\n        RAISE NOTICE '✅ Supporting tables created: question_concepts, question_stats, question_variants';\n        RAISE NOTICE '✅ Performance indexes created';\n        RAISE NOTICE '✅ System ready for Phase 4A AI Engine integration!';\n    ELSE\n        RAISE EXCEPTION 'Migration failed: Expected new columns not found';\n    END IF;\nEND;\n$$;\n\nCOMMIT;\n\n-- Final status\nDO $$\nBEGIN\n    RAISE NOTICE '===============================================================================';\n    RAISE NOTICE 'JEE Smart AI Platform - Questions Table Enhanced Successfully!';\n    RAISE NOTICE 'Industry-Grade Schema: ✅ Ready for CSV Import and Phase 4A';\n    RAISE NOTICE '===============================================================================';\nEND $$;