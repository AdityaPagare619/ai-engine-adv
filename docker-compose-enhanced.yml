# Enhanced Docker Compose - Phase 1 Production Ready
version: '3.8'

services:
  # PostgreSQL Database - Enhanced with proper migrations
  postgres:
    image: postgres:16-alpine
    container_name: jee_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-jee_smart_platform}
      POSTGRES_USER: ${DB_USER:-jee_admin}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_jee_2025}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d:ro
    networks:
      - jee-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-jee_admin} -d ${DB_NAME:-jee_smart_platform}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache - Enhanced
  redis:
    image: redis:7-alpine
    container_name: jee_redis_prod
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redisdata:/data
    networks:
      - jee-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NEW: AI Engine Service
  ai-engine:
    build:
      context: ./services/ai-engine
      dockerfile: Dockerfile
    container_name: jee_ai_engine
    restart: unless-stopped
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://jee_admin:secure_jee_2025@postgres:5432/jee_smart_platform}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - BKT_MODEL_PATH=/app/models/
    ports:
      - "8005:8005"
    volumes:
      - ./ai_engine:/app/ai_engine:ro
      - ./models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - jee-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # NEW: Time Context Service  
  time-context:
    build:
      context: ./services/time-context
      dockerfile: Dockerfile
    container_name: jee_time_context
    restart: unless-stopped
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://jee_admin:secure_jee_2025@postgres:5432/jee_smart_platform}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "8006:8006"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ai-engine:
        condition: service_healthy
    networks:
      - jee-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Enhanced API Gateway
  api-gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    container_name: jee_api_gateway_prod
    restart: unless-stopped
    environment:
      - NODE_ENV=${ENVIRONMENT:-production}
      - PORT=8080
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # Enhanced service URLs
      - ADMIN_SERVICE_URL=http://admin-service:8000
      - CONTENT_PROCESSOR_URL=http://content-processor:8002
      - ASSET_PROCESSOR_URL=http://asset-processor:8003
      - DATABASE_MANAGER_URL=http://database-manager:8004
      - AI_ENGINE_URL=http://ai-engine:8005
      - TIME_CONTEXT_URL=http://time-context:8006
    ports:
      - "${GATEWAY_PORT:-8080}:8080"
    depends_on:
      admin-service:
        condition: service_healthy
      content-processor:
        condition: service_healthy
      asset-processor:
        condition: service_healthy
      database-manager:
        condition: service_healthy
      ai-engine:
        condition: service_healthy
      time-context:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - jee-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Enhanced Frontend
  phase3-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: jee_frontend_prod
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    environment:
      - REACT_APP_API_URL=http://localhost:8080
      - REACT_APP_ENVIRONMENT=production
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - jee-network

  # Existing services remain the same...
  admin-service:
    build:
      context: ./services/admin-management
      dockerfile: Dockerfile
    container_name: jee_admin_service
    restart: unless-stopped
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://jee_admin:secure_jee_2025@postgres:5432/jee_smart_platform}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    expose:
      - "8000"
    volumes:
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - jee-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  database-manager:
    build:
      context: ./services/database-manager
      dockerfile: Dockerfile
    container_name: jee_database_manager
    restart: unless-stopped
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://jee_admin:secure_jee_2025@postgres:5432/jee_smart_platform}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    expose:
      - "8000"
    volumes:
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - jee-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  content-processor:
    build:
      context: ./services/content-processor
      dockerfile: Dockerfile
    container_name: jee_content_processor
    restart: unless-stopped
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://jee_admin:secure_jee_2025@postgres:5432/jee_smart_platform}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - UPLOAD_DIR=/data/uploads
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "8002:8002"
    volumes:
      - ./data/uploads:/data/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - jee-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  asset-processor:
    build:
      context: ./services/asset-processor
      dockerfile: Dockerfile
    container_name: jee_asset_processor
    restart: unless-stopped
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://jee_admin:secure_jee_2025@postgres:5432/jee_smart_platform}
      - UPLOAD_DIR=/data/uploads/assets
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "8003:8003"
    volumes:
      - ./data/uploads/assets:/data/uploads/assets
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - jee-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  pgdata:
    driver: local
  redisdata:
    driver: local

networks:
  jee-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16